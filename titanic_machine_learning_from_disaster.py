# -*- coding: utf-8 -*-
"""Titanic: Machine Learning from Disaster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdRFpu2dBX9VjP6OfzADuWYANqWLZCE0

## Introduction

The sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.

One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.

In this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.

## Library Imports

Pandas - For data manipulation <br>
Numpy - For Numerical arrays
"""

import pandas as pd
import numpy as np

print('Library Imports Successful!')

"""## Dataset Imports"""

train_set = pd.read_csv('/home/saurabh/Desktop/titanic/all/train.csv')
test_set = pd.read_csv('/home/saurabh/Desktop/titanic/all/test.csv')
# Dataset is now stored in a Pandas Dataframe 

print('Data Imports Successful!')

"""## Data Concatenation"""

#checking the columns in training and testing datasets
print(train_set.columns)
print("-"*40)
print(test_set.columns)

"""Next we store our target column in a variable and drop this target column from the training dataset."""

survived = train_set['Survived']
y = train_set.drop(['Survived'], axis = 1)

"""Now to concat the row of our train and test datasets."""

final_data = pd.concat([y, test_set], axis = 0)

"""Checking the number of rows and columns in our dataset."""

final_data.shape

"""## Data Cleaning"""

final_data.isnull().sum()

"""## Missing Value Treatment"""

final_data['Age'] = final_data['Age'].fillna(final_data['Age'].mean())
final_data['Fare'] = final_data['Fare'].fillna(final_data['Fare'].mean())
final_data['Embarked'] = final_data['Embarked'].fillna('S')

final_data['Cabin'] = final_data['Cabin'].notnull()
final_data['Cabin'].head(10)

final_data.isnull().sum()

final_data = final_data.drop(['PassengerId', 'Ticket'], axis = 1)

"""## Feature Engineering"""

final_data.head(10)

final_data['Title'] = final_data['Name'].apply(lambda x : x.split(".")[0].split(",")[1].strip())

np.unique(final_data['Title'])

final_data['Title'] = final_data['Title'].replace('Mlle','Miss')
final_data['Title'] = final_data['Title'].replace('Mme','Mrs')
final_data['Title'] = final_data['Title'].replace('Miss','Ms')

s = ['Major', 'Lady', 'Sir','the Countess', 'Jonkheer', 'Don','Dona', 'Rev', 'Dr','Capt','Col']

final_data['Title'] =  final_data['Title'].replace(s,'Special')

np.unique(final_data['Title'])

"""## Data Binarization & More Cleaning"""

final_data['Age'] = pd.qcut(final_data['Age'], q=4, labels = False)
final_data['Fare'] = pd.qcut(final_data['Fare'], q=4, labels = False)

final_data.head(10)

final_data = final_data.drop(['Name'], axis = 1)

final_data['All_People_Traveling'] = final_data['SibSp'] + final_data['Parch']

final_data.columns

"""## Data Encoding

Taking out data in to One-Hot Encoding format.
"""

df_dum = pd.get_dummies(final_data, columns = ['Sex','Age','Cabin','Title','Embarked'])
df_dum.info()

df_dum.head(10)

"""## Train-Test Data Split"""

Train_X = df_dum[:891]
Train_Y = survived[:891]

Test_X = df_dum[891:]

"""## Algorithm"""

from sklearn.ensemble import RandomForestClassifier

randomforest = RandomForestClassifier(n_estimators = 100)
randomforest.fit(Train_X, Train_Y)

y_pred_rf = randomforest.predict(Test_X)
print(classification_report(TEST_Y, y_pred_rf))

y_pred_rf

